class State:
    def __init__(self, cl, ml, boat, cr, mr, parent=None):
        self.cl, self.ml, self.boat, self.cr, self.mr, self.parent = cl, ml, boat, cr, mr, parent
    
    def is_goal(self):
        return self.cl == self.ml == 0
    
    def is_valid(self):
        return (0 <= self.ml >= self.cl or self.ml == 0) and (0 <= self.mr >= self.cr or self.mr == 0)
    
    def __eq__(self, other):
        return (self.cl, self.ml, self.boat, self.cr, self.mr) == (other.cl, other.ml, other.boat, other.cr, other.mr)
    
    def __hash__(self):
        return hash((self.cl, self.ml, self.boat, self.cr, self.mr))

def successors(state):
    moves = [(2, 0), (0, 2), (1, 1), (1, 0), (0, 1)]
    children = []
    direction = -1 if state.boat == 'left' else 1
    
    for c, m in moves:
        new_state = State(state.cl + direction * c, state.ml + direction * m, 'right' if state.boat == 'left' else 'left', 
                          state.cr - direction * c, state.mr - direction * m, state)
        if new_state.is_valid():
            children.append(new_state)
    return children

def bfs():
    initial = State(3, 3, 'left', 0, 0)
    queue, explored = [initial], set()
    
    while queue:
        state = queue.pop(0)
        if state.is_goal():
            return state
        explored.add(state)
        for child in successors(state):
            if child not in explored and child not in queue:
                queue.append(child)
    return None

def print_solution(solution):
    path = []
    while solution:
        path.append(solution)
        solution = solution.parent
    for state in reversed(path):
        print(f"({state.cl}, {state.ml}, {state.boat}, {state.cr}, {state.mr})")

def main():
    solution = bfs()
    print("Missionaries and Cannibals solution:")
    print("(CL, ML, Boat, CR, MR)")
    print_solution(solution) if solution else print("No solution found.")

if __name__ == "__main__":
    main()
