import heapq

class Node:
    def __init__(self, name, heuristic):
        self.name = name
        self.heuristic = heuristic
        self.children = []
        self.parent = None

def best_first_search(start, goal):
    open_set = []
    heapq.heappush(open_set, (start.heuristic, start))
    visited = set()

    while open_set:
        current = heapq.heappop(open_set)[1]
        print(f"Processing node: {current.name} with heuristic: {current.heuristic}")

        if current.name == goal:
            return reconstruct_path(current)

        visited.add(current.name)

        for child in current.children:
            if child.name not in visited:
                heapq.heappush(open_set, (child.heuristic, child))
                print(f"Adding child to open set: {child.name} with heuristic: {child.heuristic}")

    return None

def reconstruct_path(node):
    path = []
    while node:
        path.append(node.name)
        node = node.parent
    return path[::-1]

A = Node('A', 7)
B = Node('B', 6)
C = Node('C', 2)
D = Node('D', 1)
E = Node('E', 0)

A.children = [B, C]
B.children = [D]
C.children = [D]
D.children = [E]

path = best_first_search(A, 'E')
print("Path found:", path)